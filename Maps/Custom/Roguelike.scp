---------------------------------------------------------------------------------------------------------
-- SCRIPT AND MAP MADE BY BONESNAKE
--
-- Feel free to modify the code and the map, just make sure not to distribute them without crediting me.
-- You should be able to modify most "constants" with ease and without issues.
-- I've tried to use the same coding style that was used in e2tutorial.scp.
-- If you have any questions or suggestions, find me on Steam (id: bonesnake).
---------------------------------------------------------------------------------------------------------

-- Initializes "constants".
function Init_Constants()
  IS_VICTORY_ENABLED = true; -- whether to enable victory conditions

  STARTING_SPELL_COUNT = 16; -- the number of spells the main hero starts with (may not match based on spell recurrence)
  STARTING_SPELL_RECURRENCE = 2; -- the number of times a starting spell will be duplicated (ie: if set to 2, the main hero will have 8 different spells, 2 of each)
  MAX_LOOT_DISPLAYED = 7; -- loot dialogue box displays this amount of loot at a time (setting it to a value higher than 7 may cause it to overflow)

  MIN_RESOURCES_PER_AREA = 2; -- the min amount of resources that can spawn in an area (the map has multiple areas)
  MAX_RESOURCES_PER_AREA = 3; -- the max amount of resources that can spawn in an area (the map has multiple areas)
  MIN_MOBS_PER_AREA = 1; -- the min amount of mobs that can spawn in an area (the map has multiple areas)
  MAX_MOBS_PER_AREA = 3; -- the max amount of mobs that can spawn in an area (the map has multiple areas)

  ARTEFACT_RECHARGER_BASE_CHANCE = 5; -- the base chance for the artefact recharger to appear
  ARTEFACT_RECHARGER_CHANCE_INCREASE = 32; -- the artefact recharger will have this amount more chance to appear each rotation after it fails to do so

  HERO_SHAPES = { "BlackMainHero-1", "BlueMainHero-1", "GreenMainHero-1", "RedMainHero-1", }; -- these are the shapes that the hero can spawn as
  BG_THEMES = { "ad_Black01", "ad_Blue01", "ad_Green01", "ad_Red01", }; -- table of background musics

  SPELL_TABLE =
  {
    { -- lvl 1 spells
      "STRT", "FRWA", "ZAPP", "LSST", "KBSH", "ORSH", "WLBR", "DRAT", "WNFL", -- chaot
      "SPFG", "TIWR", "MNDP", "SHCL", "DNFR", "TNSA", "BEWR", "LSHE", "GRSN", -- vital
      "AVSC", "LSUS", "TGSK", "LSDS", "STAT", "WLAR", "GBBR", "RVHL", -- kinet
      "MCWO", "JRRG", "ENFL", "FAIL", "TWEN", "SMVL", "WLIL", "BRAB", "MNHP", -- synthet
      "OUS1", "OST1", "OST2", "OST3", -- pale
    },
    { -- lvl 2 spells
      "RKWL", "PRAT", "ERQA", "BRGR", "PLMR", "WHAS", "CRBL", "BASO", "RIOT", "KBGD", "ORGD", "WLMG", "KBEL", "BATT", "DSIG", "GEYS", "BLKD", "NWLF", "ASST", -- chaot
      "GRTN", "MAHO", "MYHO", "TANT", "SYMB", "TRAD", "SNRG", "MNTP", "SPBA", "UPGD", "THIF", "SPLK", "CMBN", "SACR", "BEWK", "TIWK", "MNTS", "ETTD", "HEAL", "CHNL", "CRIV", "SPWB", "BEHD", "BEQN", "TIQN", "TRSN", "SWSN", -- vital
      "LMMN", "AVMK", "AVAS", "BLNC", "FOGG", "HUNG", "BANN", "CLNP", "MALS", "AMNS", "CURS", "SCSK", "COPL", "SGHT", "GBIN", "SHSP", "CLSP", "WZSP", "WLBZ", "RVHG", "AWAK", "UNSM", "ENFR", "ICST", "FURY", "SEHL", -- kinet
      "BGVL", "PTRS", "MCWU", "RECL", "BRRL", "PWTP", "NOIS", "BDEX", "ENRG", "DRGS", "FRGS", "PHWL", "BRMZ", "INCR", "PRFY", "SLRP", "SCBR", "IRRT", "RPST", "IRAB", "WLDG", "HOPR", "MDWP", "TRLB", "REDR", "WETX", -- synthet
      "SMFX", "FTCH", "BNSH", "PLSL", "OMWP", "OBLS", "GBNS", "GIFT", "ORFT", "OCLV", "OMSW", "PRWR", -- pale
    },
    { -- lvl 3 spells
      "DMRT", "BROT", "OREL", "GBAT", "WLLV", "FLIC", "VOLC", "CNBL", "ANHL", "RIFT", "LGST", "CTST", "SNOV", "WEAK", "MNBN", "GROG", "SHWL", "SLWL", "KBWR", "ORWR", "CLIG", "TREM", "FRST", "STRG", "SMOK", "IMML", -- chaot
      "ANTN", "CANV", "DRFR", "MNTX", "MTSC", "MOBE", "CAFG", "GIFG", "LASN", "HRCN", "SNCR", "BLSS", "GLDT", "DOMN", "ENWO", "STWO", "MOTI", "BHWR", "GRHE", "SNHG", "ENLH", "CLSN", "ASLT", "FRNT", "TWST", "MNDW", "ENVM", "HAST", -- vital
      "LMWA", "WLFC", "AVEL", "GBGN", "WRSP", "FDBK", "MDBL", "FRWN", "SHSK", "HOAM", "ERBN", "SPWR", "MGHT", "AREL", "EREL", "FREL", "WTEL", "SWHL", "DECN", "CHCM", "SPTR", -- kinet
      "IRMC", "BRMC", "RFPT", "MCWY", "REPR", "IMMB", "DWND", "DISM", "PALN", "WLDT", "IRMZ", "LSPC", "ENAL", "SFGS", "DPGS", "DELS", "MDNS", "STAB", "FMFI", "WLBL", "SWMN", "CTMN", "MXHP", "TPLF", "LQRL", "ALST", "OVRL", "RBRT", "QKFX", -- synthet
      "OUD1", "OUD2", "OUE1", "OUE2", "OUS2", "OUS3", "SMTG", "ORPL", "OFLX", "OEXC", "PRGD", "PRBN", "OCRP", "LCWR", "LEWR", "LSWR", "ALNS", "PRWT", -- pale
    },
    { -- lvl 4 spells
      "VBAT", "MNBR", "MNBN", "WLIF", "OGKN", "CCLP", "ETCH", "FRBL", "RNST", "MNVR", "COMT", -- chaot
      "GRFG", "MTPT", "BHMO", "MNTH", "ANFR", "FTDS", "VTLY", -- vital
      "LMWD", "LMWK", "WLWD", "FLOD", "CNAR", "RDDG", "BLDG", "GRDG", "BUDG", "CRHG", "PSBR", "SHFR", -- kinet
      "STMC", "STMZ", "EXIL", "CLON", "CLFR", "MLFI", "RZMN", "WKHR", "STTX", -- synthet
      "OUD3", "OUE3", "SMWB", "STSK", "PLWP", "ENBR", "LFGR", "GCWR", "GEWR", "GSWR", -- pale
    }
  };

  MOB_TABLE = -- these must match their map names
  {
    { "m11 - Bee Warrior", "m11 - Fingus Spitting", "m11 - Treant Sapling", "m12 - Fingus Spitting", "m21 - Bat", "m21 - River Halo", "m21 - Stink Rat", "m31 - Aviak Scout", "m31 - Bronze Abomination", "m31 - Treant Sapling", "m41 - Bronze Abomination", "m41 - Worm", "m51 - River Halo", "m51 - Sorcerer1", "m51 - Worm", }, -- lvl 1 mobs
    { "m11 - Fingus Carnivorous", "m11 - Hopper Mini", "m11 - Mech Worm", "m12 - Fingus Carnivorous", "m12 - Hornet Magic", "m12 - Mech Wurm", "m12 - Tick Worker", "m12 - Velos Small", "m13 - Kobold Shaman", "m21 - Aviak Scout", "m21 - Gibberling", "m21 - Orc Shaman", "m31 - Pteros", "m31 - Sorcerer1", "m31 - Wall of Air", "m41 - Pteros", "m41 - Sorcerer1_2", "m41 - Velos Small", "m41 - Worm Medium", "m51 - Aviak Scout", "m51 - Bronze Abomination", "m51 - Fighter1", "m51 - Gibberling", "m51 - Wall Of Air", }, -- lvl 2 mobs
    { "m11 - Wall of Illusion", "m21 - Aviak Assassin", "m21 - Warrior Spirit", "m22 - Disease Rat", "m22 - Kobold Guard", "m22 - Magic Hornet", "m22 - Mini Hopper", "m22 - Wall of Breeze", "m31 - Fighter1", "m31 - Wall of Breeze", "m31 - Warlock1", "m32 - Aviak Assassin", "m32 - Orc Shaman", "m32 - Wall of Breeze", "m41 - Fighter1", "m41 - Sorcerer1", "m41 - Wall of Illusion", "m42 - Disease Rat", "m42 - Gibberling", "m51 - Aviak Assassin", "m51 - Hopper", "m51 - Treant", "m51 - Wall of Illusion", "m51 - Warlock1_1", }, -- lvl 3 mobs
    { "m13 - Kobold Elder", "m22 - Big Velos", "m22 - Orc Guard", "m22 - Sea Halo", "m22 - Wall of Magma", "m23 - Disease Rat", "m23 - Tick Warrior", "m32 - Orc Guard 1", "m32 - Orc Guard 2", "m32 - Swamp Snake", "m33 - Aviak Marksman", "m42 - Bat", "m42 - Swamp Snake", "m42 - Tick Warrior", "m42 - Treant", "m51 - Devourer1", "m51 - Wall of Magma", "m51 - Warlock1_2", "m51 - Warrior Spirit", }, -- lvl 4 mobs
    { "m12 - Fingus Giant", "m12 - Hopper", "m13 - Bee Hive Guard", "m13 - Hopper Maxi", "m13 - Mechos Bronze", "m13 - Orc Guard", "m13 - Outer Fighter 2", "m13 - Vampire Bat", "m22 - Giant Bat", "m22 - Tick Queen", "m23 - Iron Abomination", "m23 - Plague Rat", "m32 - Phantasmal Wall", "m32 - Sea Halo", "m33 - Aviak Elder", "m33 - Gibberling Gang", "m42 - Gargantuan Fingus", "m42 - Lake Snake", "m43 - Bronze Mechozaurus", "m43 - Dragon", "m43 - Enchanter1", "m43 - Fighter1", "m43 - Iron Abomination", "m43 - Wall of Magma", "m43 - Wyrm", "m52 - Aviak Elder", "m53 - Shaman Spirit", }, -- lvl 5 mobs
    { "m12 - Phantasmal Wall", "m12 - Snake Grass", "m13 - Aviak Marksman", "m13 - Gibberling Instigator", "m13 - Mechos Iron", "m13 - Mechos Steel", "m13 - Snake Tree", "m13 - Spirit Cleric", "m13 - Treant Great", "m14 - Mech Wyrm", "m22 - Gibberling Instigator", "m23 - Cleric Spirit", "m23 - Doom Rat", "m23 - Iron Mechos", "m23 - Wall of Daggers", "m32 - Orc Warrior 1", "m32 - Orc Warrior 2", "m33 - Air Elemental", "m33 - Cleric Spirit", "m33 - Shaman Spirit", "m33 - Sorcerer2", "m33 - Wall of Daggers", "m33 - Wall of Force", "m42 - Evil Eye", "m42 - Mantis", "m43 - Air Elemental", "m43 - Devourer1", "m43 - Enchanter2", "m43 - Fighter2_1", "m43 - Gibberling Gang", "m43 - Mystic Hornet", "m43 - Reinforced Pteros (general)", "m43 - Silicon Wall", "m43 - Swamp Halo", "m43 - Warlock2", "m44 - Sea Halo", "m52 - Bee Queen", "m52 - Tick Queen", "m53 - Gibberling Gang", "m53 - Orc Warrior", "m53 - Plague Rat", "m53 - Wall of Lava", }, -- lvl 6 mobs
    { "m13 - Bee Hive Boss", "m13 - Cutter Man", "m13 - Mechozaurus Iron", "m13 - Spirit Shaman", "m23 - Lamia Monk", "m23 - Shaman Spirit", "m23 - Water Elemental", "m33 - Bee Queen", "m33 - Enchanter2", "m33 - Wall of Lava", "m33 - Warlock3", "m43 - Female Fighter", "m43 - Fighter2_2", "m43 - Fighter2_3", "m43 - Sorceror2", "m43 - Wall of Distortion", "m44 - Female Fighter", "m44 - Lamia Monk", "m52 - Evil Eye Warrior", "m52 - Mantis Scribe", "m53 - Orc Elder", "m53 - Water Elemental", }, -- lvl 7 mobs
    { "m13 - Mechos Steel Boss", "m13 - Mechozaurus Steel", "m13 - Ogre Gray", "m13 - Orc Warrior", "m14 - Evil Eye Warrior", "m14 - Mechos Steel", "m23 - Orc Elder", "m23 - Pale Reaper", "m23 - Shadow Wolf", "m24 - Cutter Man", "m24 - Gray Ogre", "m33 - Devourer2", "m33 - Enchanter3", "m33 - Ogre King", "m33 - Sorcerer3", "m33 - Water Elemental", "m33 - Wizard Spirit", "m34 - Mother Bee", "m34 - Rock Wall", "m43 - Devourer2", "m43 - Enchanter3 (in dungeon)", "m43 - Male Fighter", "m43 - Sorceror3", "m43 - Warlock3", "m52 - Earth Elemental", "m52 - Mantis Scribe 2", "m52 - Orc Elder", "m52 - Steel Abomination", "m53 - Fire Elemental", "m53 - Gray Ogre", "m53 - Shadow Wolf", "m53 - Wall of Inferno Flames", }, -- lvl 8 mobs
    { "m13 - Spirit Wizard", "m14 - Mechozaurus Steel", "m23 - Earth Elemental", "m23 - Fire Elemental", "m24 - Lamia Warlord", "m24 - Lamia Warrior", "m33 - Fighter3", "m33 - Lamia Warlord", "m34 - Enchanter3", "m34 - Orc Elder", "m34 - Wall of Wind", "m43 - Fighter3", "m44 - Fighter3", "m44 - Wall of Inferno Flames", "m52 - Evil Eye Mother", "m52 - Mantis Patriarch", "m53 - Ogre King", "m53 - Orc Elder 2", "m54 - Sawer Man", }, -- lvl 9 mobs
    { "m14 - Wall of Blades", "m24 - Evil Eye Mother", "m24 - Ogre King", "m24 - Sawer Man", "m33 - Lamia Warlock", "m34 - Fighter3", "m43 - Devourer3 (Boss)", "m44 - Razor Man", "m54 - Cyclop", "m54 - Lamia Warlock", "m54 - Outer 2", }, -- lvl 10 mobs
    { "m14 - Razor Man", "m24 - Cyclop", "m24 - Lamia Warlock", "m24 - Red Dragon", "m34 - Black Dragon", "m34 - Devourer3", "m34 - Razor Man", "m44 - Devourer3", "m54 - Blue Dragon", "m54 - Outer 1", "m54 - Razor Man", }, -- lvl 11 mobs
    { "m34 - Walking Horror", "m44 - Blue Dragon", "m54 - Konung", "m54 - Outer 3", "m54 - Outer 4", }, -- lvl 12 mobs
    { "m14 - Walking Horror", }, -- lvl 13 mobs
  };

  RESOURCE_POSITION_TABLE = -- this is where resources can spawn
  {
    { -- starting area
      { ["x"] = 36, ["y"] = 12, },
      { ["x"] = 43, ["y"] = 15, },
      { ["x"] = 32, ["y"] = 19, },
      { ["x"] = 40, ["y"] = 24, },
      { ["x"] = 42, ["y"] = 21, },
      { ["x"] = 32, ["y"] = 23, },
    },
    { -- vital/left side
      { ["x"] = 26, ["y"] = 30, },
      { ["x"] = 25, ["y"] = 35, },
      { ["x"] = 32, ["y"] = 39, },
      { ["x"] = 32, ["y"] = 43, },
      { ["x"] = 30, ["y"] = 47, },
    },
    { -- kinet/right side
      { ["x"] = 47, ["y"] = 29, },
      { ["x"] = 53, ["y"] = 27, },
      { ["x"] = 53, ["y"] = 48, },
      { ["x"] = 53, ["y"] = 42, },
      { ["x"] = 48, ["y"] = 35, },
    },
    { -- final area
      { ["x"] = 38, ["y"] = 51, },
      { ["x"] = 46, ["y"] = 58, },
      { ["x"] = 39, ["y"] = 55, },
      { ["x"] = 44, ["y"] = 60, },
      { ["x"] = 38, ["y"] = 64, },
      { ["x"] = 45, ["y"] = 55, },
    },
  };

  MOB_POSITION_TABLE = -- this is where mobs can spawn
  {
    { -- starting area
      { ["x"] = 38, ["y"] = 16, ["rot"] = 0, },
      { ["x"] = 37, ["y"] = 25, ["rot"] = 0, },
      { ["x"] = 43, ["y"] = 23, ["rot"] = 180, },
      { ["x"] = 43, ["y"] = 19, ["rot"] = 180, },
      { ["x"] = 33, ["y"] = 20, ["rot"] = 270, },
      { ["x"] = 34, ["y"] = 23, ["rot"] = 270, },
    },
    { -- vital/left side
      { ["x"] = 25, ["y"] = 34, ["rot"] = 270, },
      { ["x"] = 28, ["y"] = 36, ["rot"] = 0, },
      { ["x"] = 28, ["y"] = 45, ["rot"] = 0, },
      { ["x"] = 31, ["y"] = 39, ["rot"] = 180, },
      { ["x"] = 34, ["y"] = 46, ["rot"] = 180, }
    },
    { -- kinet/right side
      { ["x"] = 50, ["y"] = 30, ["rot"] = 0, },
      { ["x"] = 52, ["y"] = 26, ["rot"] = 180, },
      { ["x"] = 47, ["y"] = 46, ["rot"] = 270, },
      { ["x"] = 48, ["y"] = 38, ["rot"] = 270, },
      { ["x"] = 52, ["y"] = 48, ["rot"] = 0, },
    },
    { -- final area
      { ["x"] = 40, ["y"] = 53, ["rot"] = 0, },
      { ["x"] = 43, ["y"] = 53, ["rot"] = 0, },
      { ["x"] = 42, ["y"] = 45, ["rot"] = 90, },
      { ["x"] = 45, ["y"] = 58, ["rot"] = 180, },
      { ["x"] = 38, ["y"] = 61, ["rot"] = 270, },
    },
  };

  BOSS_MOB_POSITION = { ["x"] = 41, ["y"] = 65, ["rot"] = 0, };

  ID_EXIT_TELEPORTER = 39;
  ID_SHOP_SIGN = 489;
  ID_ARTEFACT_RECHARGER = 492;

  ID_STARTING_AREA_LEFT_BLOCKADE = 6;
  ID_STARTING_AREA_RIGHT_BLOCKADE = 11;

  ID_LEFT_SIDE_BLOCKADE1 = 75;
  ID_LEFT_SIDE_BLOCKADE2 = 192;

  ID_RIGHT_SIDE_BLOCKADE = 67;
  ID_RIGHT_SIDE_BRIDGE_PART1 = 188;
  ID_RIGHT_SIDE_BRIDGE_PART2 = 189;
  ID_RIGHT_SIDE_BRIDGE_PART3 = 190;
end;

-- Initializes "dynamic 'constants'".
function Init_Dynamic_Constants() -- "dynamic" because they are modified by the code upon initialization
  ID_TABLE_RESOURCES = Shuffle(
  {
    325, 326, 327, 328, 329, 330, 335, 336, 337, 338, -- root 1
    331, 332, 333, 339, -- root 2
    334, -- root 3
    343, 344, 345, 346, 347, 348, 349, 350, 351, 352, -- ruby 1
    353, 354, 355, 356, -- ruby 2
    357, -- ruby 3
    358, 359, 360, 361, 362, 363, 364, 365, 366, 367, -- flame 1
    368, 369, 370, 371, -- flame 2
    372, -- flame 3
  });
  ID_TABLE_SPECIAL_OBJECTS = Shuffle(
  {
    -- specializations (not included because of crashes/other problems: 267, 279, 301, 304)
    255,      268, 269, 270, 271, 272, 273, 274,
    275, 276, 277, 278,      280, 281, 282, 283,
    284, 285, 286, 287, 288, 289, 290, 291, 292,
    293, 294, 295, 296, 297, 298, 299, 300,
    302, 303,      305, 306, 307, 308, 309, 310,
    311, 312, 313, 314, 315, 316, 317, 318, 319,
    320, 321, 322, 323, 324,
    -- artifacts (not included because of crashes/other problems: 392)
    390, 391,      393, 394, 395, 396, 397, 398,
    399, 400, 401, 402, 403, 404, 405, 406, 407,
    408, 409, 410,
  });
  SHOPS = Shuffle(
  {
    { ["id"] = 373, ["desc"] = "Basic Spells", },
    { ["id"] = 411, ["desc"] = "Bats and Rats", },
    { ["id"] = 412, ["desc"] = "Aviaks", },
    { ["id"] = 413, ["desc"] = "Healing", },
    { ["id"] = 414, ["desc"] = "Walls and Defense", },
    { ["id"] = 415, ["desc"] = "Strengthening Enchantments", },
    { ["id"] = 417, ["desc"] = "Orcs and Kobolds", },
    { ["id"] = 418, ["desc"] = "Offensive Sorcery Spells and Enchantments", },
    { ["id"] = 419, ["desc"] = "Spirits", },
    { ["id"] = 485, ["desc"] = "Pale Enchantments and Sorcery Spells", },
    { ["id"] = 484, ["desc"] = "Pale Summons", },
    { ["id"] = 483, ["desc"] = "Disenchanting", },
    { ["id"] = 482, ["desc"] = "Ether Control", },
    { ["id"] = 487, ["desc"] = "Exceptional Summons", },
  });
end;

-- Initializes variables.
function Init_Variables()
  onstep_tick_count = 0; -- in-game tick count recorded in the OnStep hook, see the OnBattleFinishing hook for more info
  is_main_hero_ready = false; -- used before giving control to the player
  rotation_count = 0; -- rotation count increases each time the teleporter is used
  placed_special_object_count = 0; -- the amount of special objects that have been placed
  placed_resource_count = 0; -- the amount of resources that have been placed
  artefact_recharger_chance = ARTEFACT_RECHARGER_BASE_CHANCE; -- the chance for the artefact recharger to appear (it appears if it reaches 100)
  is_mob_cleanup = false; -- used to clean up mobs when using the teleporter
  side = ""; -- the side that is open for exploration (left or right)
  mobs = {}; -- current mobs on the map
  current_shop_description = ""; -- the description of the shop currently placed on the map
  boss_level = 0; -- the level of the current boss
  is_winning = false; -- whether the conditions for victory are met
end;

-- Etherlords 2 local function.
function Local_Hook_Init()
  randomseed( ExGetTickCount() * 1000 ); -- this makes RNG work as expected
  Init_Constants();
  Init_Dynamic_Constants();
  Init_Variables();
end;

-- Etherlords 2 local function.
function Local_Hook_GameStarted()
  -- starts a random background music after loading a saved game
  if is_main_hero_ready then
    local bg_theme = GetRandomElement( BG_THEMES );
    ExStartBackgroundTheme( bg_theme );
  end;
end;

-- Sets up main hero and plays the intro scene.
function OnStep_Setup()
  SetUpMainHero();
  -- intro scene
  ExAddCommandCameraAttach( nil );
  ExCameraInstantScrollToPos( 38, 11 );
  ExAddCommandCameraRotate( ANGLE_NORTH );
  ExAddCommandStartObservation( "start", 38, 11, 6 );
  ExAddCommandMoveAndUseObject( g_MainHeroId, ID_EXIT_TELEPORTER );
  ExAddCommandFinishObservation( "start" );
end;

-- Etherlords 2 local function.
function Local_Hook_OnStep()
  if ExIsAlive( g_MainHeroId ) and not is_main_hero_ready then
    OnStep_Setup();
    is_main_hero_ready = true;
  end;
  onstep_tick_count = ExGetTickCount();
end;

-- Called when the exit teleporter is used.
function OnPreUse_Teleporter()
  -- tries to end the game if victory conditions are met
  if IS_VICTORY_ENABLED then
    local max_enemy_level = getn( MOB_TABLE );
    if boss_level == max_enemy_level then
      is_winning = true;
      ExMessageBoxOkCancel( "You have defeated the final boss. Are you ready to end the game?", nil );
      return nil;
    end;
  end;
  ProgressMap();
  return 1;
end;

-- Called when interacting with the shop sign.
function OnPreUse_Sign()
  -- tells the player the contents of the shop
  local description = "Shop of "..current_shop_description;
  ExMessageBoxStandardAction( description );
  return nil;
end;

-- Etherlords 2 local function.
function Local_Hook_OnPreUse( object_id, hero_id )
  if object_id == ID_EXIT_TELEPORTER then
    return OnPreUse_Teleporter();
  elseif object_id == ID_SHOP_SIGN then
    return OnPreUse_Sign();
  end;
  return 1;
end;

-- Etherlords 2 local function.
function Local_Hook_OnCloseMessageBox( callback )
  -- ends the game if the OK button is clicked on the victory popup
  if is_winning then
    if callback == "OK" then
      ExWinLoseMission( 1 );
    else
      is_winning = false;
    end;
  end;
end;

-- Called when an enemy mob is killed.
function OnHeroKill_Enemy( enemy_id )
  RemoveCorpse( enemy_id ); -- this is necessary for both cleanup and non cleanup kills
  -- only give loot if the mob is not killed by the code
  if not is_mob_cleanup then
    local enemy_level = ExGetHeroLevel( enemy_id );
    local total_loot_count = GetLootCount( enemy_level );
    -- loot system (same as the basic one, but handles loot overflow)
    for i = 1, ceil( total_loot_count / MAX_LOOT_DISPLAYED ) do
      local current_loot_count = total_loot_count - ( MAX_LOOT_DISPLAYED * ( i - 1 ) );
      if current_loot_count > MAX_LOOT_DISPLAYED then
        current_loot_count = MAX_LOOT_DISPLAYED;
      end;
      for j = 1, current_loot_count do
        loot_level = GetLootLevel( enemy_level );
        loot = GetRandomElement( SPELL_TABLE[ loot_level ] );
        ExAddLootMessageSpell( loot );
        ExAddSpell( g_MainHeroId, loot );
      end;
      ExSendLootMessage();
    end;
  end;
end;

-- Etherlords 2 local function.
function Local_Hook_OnHeroKill( hero_id )
  if hero_id ~= g_MainHeroId then
    OnHeroKill_Enemy( hero_id );
  end;
end;

-- Etherlords 2 local function.
function Local_Hook_OnBattleFinishing( attacker_id, target_id, winner_id )
  -- smooth camera effect when declining combat requests
  if winner_id ~= g_MainHeroId then
    ExAddCommandCameraToObject( g_MainHeroId );
  end;
  return nil;
end;

-- Changes main hero's shape and spells.
function SetUpMainHero()
  -- sets hero's shape
  local hero_shape = GetRandomElement( HERO_SHAPES );
  ExSetHeroShape( g_MainHeroId, hero_shape );
  -- clears hero's hand and gives new spells
  ExClearHand( g_MainHeroId );
  for i = 1, STARTING_SPELL_COUNT / STARTING_SPELL_RECURRENCE do
    local spell = GetRandomElement( SPELL_TABLE[ 1 ] );
    for j = 1, STARTING_SPELL_RECURRENCE do
      ExAddSpellToHand( g_MainHeroId, spell );
    end;
  end;
end;

-- Starts a new "rotation".
function ProgressMap()
  rotation_count = rotation_count + 1;
  local bg_theme = GetRandomElement( BG_THEMES );
  ExStartBackgroundTheme( bg_theme );
  ExCameraInstantScrollToPos( 38, 11 );
  ExHideExploration();
  RemoveObjects();
  if random( 1, 2 ) == 1 then
    side = "left";
  else
    side = "right";
  end;
  PlaceObjects();
end;

-- Removes placed objects from the map.
-- Just a dev note: most of these functions actually try to remove everything using a built-in function, even objects that are not placed.
-- This could be improved, but there are neither performance issues nor crashes using this method.
-- If there will ever be problems, this is the first place to look at.
function RemoveObjects()
  RemoveTerrainObjects();
  RemoveResources();
  RemoveSpecialObjects();
  RemoveShops();
  RemoveMobs();
end;

-- Places objects on the map.
function PlaceObjects()
  PlaceTerrainObjects();
  PlaceSpecialObjects();
  PlaceShops();
  PlaceResources();
  PlaceMobs();
end;

-- Removes placed terrain objects.
function RemoveTerrainObjects()
  ExTakeObject( ID_STARTING_AREA_LEFT_BLOCKADE );
  ExTakeObject( ID_STARTING_AREA_RIGHT_BLOCKADE );
  ExTakeObject( ID_LEFT_SIDE_BLOCKADE1 );
  ExTakeObject( ID_LEFT_SIDE_BLOCKADE2 );
  ExTakeObject( ID_RIGHT_SIDE_BLOCKADE );
  ExTakeObject( ID_RIGHT_SIDE_BRIDGE_PART1 );
  ExTakeObject( ID_RIGHT_SIDE_BRIDGE_PART2 );
  ExTakeObject( ID_RIGHT_SIDE_BRIDGE_PART3 );
end;

-- Removes placed resources.
function RemoveResources()
  for i = 1, getn( ID_TABLE_RESOURCES ) do
    ExTakeObject( ID_TABLE_RESOURCES[ i ] );
  end;
end;

-- Removes placed special objects.
function RemoveSpecialObjects()
  for i = 1, getn( ID_TABLE_SPECIAL_OBJECTS ) do
    ExTakeObject( ID_TABLE_SPECIAL_OBJECTS[ i ] );
  end;
  ExTakeObject( ID_ARTEFACT_RECHARGER );
end;

-- Removes placed shops.
function RemoveShops()
  for i = 1, getn( SHOPS ) do
    ExTakeObject( SHOPS[ i ].id );
  end;
end;

-- Removes placed mobs.
function RemoveMobs()
  is_mob_cleanup = true; -- prevents main hero from getting loot if mobs are killed by this script
  for i = 1, getn( mobs ) do
    local mob_id = mobs[ i ];
    if ExIsAlive( mob_id ) then -- this condition is necessary to prevent an occasional crash
      ExKillHero( mob_id );
    end;
  end;
  is_mob_cleanup = false;
  mobs = {};
end;

-- Places terrain objects.
function PlaceTerrainObjects()
  -- starting area
  if random( 1, 3 ) == 1 then
    ExPlaceObject( ID_STARTING_AREA_LEFT_BLOCKADE, 33, 14 );
    ExPlaceObject( ID_STARTING_AREA_RIGHT_BLOCKADE, 40, 14 );
  end;
  -- side areas
  if side == "left" then
    ExPlaceObject( ID_RIGHT_SIDE_BLOCKADE, 42, 23 );
  else
    ExPlaceObject( ID_LEFT_SIDE_BLOCKADE1, 30, 24 );
    ExPlaceObject( ID_LEFT_SIDE_BLOCKADE2, 35, 46 );
    ExPlaceObject( ID_RIGHT_SIDE_BRIDGE_PART1, 45, 45 );
    ExPlaceObject( ID_RIGHT_SIDE_BRIDGE_PART2, 46, 45 );
    ExPlaceObject( ID_RIGHT_SIDE_BRIDGE_PART3, 44, 45 );
  end;
end;

-- Places special objects.
function PlaceSpecialObjects()
  if side == "left" then
    PlaceSpecialObject( { ["x"] = 26, ["y"] = 43 } );
  else
    PlaceSpecialObject( { ["x"] = 54, ["y"] = 36 } );
  end;
  PlaceSpecialObject( { ["x"] = 38, ["y"] = 68 } );
  PlaceSpecialObject( { ["x"] = 43, ["y"] = 68 } );
  if random( 0, 99 ) < artefact_recharger_chance then
    ExPlaceObject( ID_ARTEFACT_RECHARGER, 44, 63 );
    artefact_recharger_chance = ARTEFACT_RECHARGER_BASE_CHANCE;
  else
    artefact_recharger_chance = artefact_recharger_chance + ARTEFACT_RECHARGER_CHANCE_INCREASE;
  end;
end;

-- Places shops.
function PlaceShops()
  local shop_count = getn( SHOPS );
  local shop_index = mod( rotation_count, shop_count );
  if shop_index == 0 then
    shop_index = shop_count;
  end;
  local shop = SHOPS[ shop_index ];
  ExPlaceObject( shop.id, 41, 40 );
  current_shop_description = shop.desc;
end;

-- Places resources.
function PlaceResources()
  local area_count = getn( RESOURCE_POSITION_TABLE );
  for i = 1, area_count do
    if ( side == "left" and i ~= 3 ) or ( side == "right" and i ~= 2 ) then
      local area = RESOURCE_POSITION_TABLE[ i ];  
      local position_count = getn( area );
      local position_indexes = GetRandomIndexes( 1, position_count );
      local new_resource_count = random( MIN_RESOURCES_PER_AREA, MAX_RESOURCES_PER_AREA );
      if new_resource_count > position_count then
        new_resource_count = position_count;
      end;
      for j = 1, new_resource_count do
        local position_index = position_indexes[ j ];
        local position = area[ position_index ];
        PlaceResource( position );
      end;
    end;
  end;
end;

-- Places mobs.
function PlaceMobs()
  local area_count = getn( MOB_POSITION_TABLE );
  for i = 1, area_count do
    if ( side == "left" and i ~= 3 ) or ( side == "right" and i ~= 2 ) then
      local area = MOB_POSITION_TABLE[ i ];  
      local position_count = getn( area );
      local position_indexes = GetRandomIndexes( 1, position_count );
      local new_mob_count = random( MIN_MOBS_PER_AREA, MAX_MOBS_PER_AREA );
      if new_mob_count > position_count then
        new_mob_count = position_count;
      end;
      for j = 1, new_mob_count do
        local position_index = position_indexes[ j ];
        local position = area[ position_index ];
        PlaceMob( position );
      end;
    end;
  end;
  PlaceMob( BOSS_MOB_POSITION, true );
end;

-- Places a special object at the given position.
function PlaceSpecialObject( position )
  local special_object_count = getn( ID_TABLE_SPECIAL_OBJECTS );
  if placed_special_object_count < special_object_count then
    placed_special_object_count = placed_special_object_count + 1;
    local id_special_object = ID_TABLE_SPECIAL_OBJECTS[ placed_special_object_count ];
    ExPlaceObject( id_special_object, position.x, position.y );
  end;
end;

-- Places a resource at the given position.
function PlaceResource( position )
  placed_resource_count = placed_resource_count + 1;
  local resource_count = getn( ID_TABLE_RESOURCES );
  local resource_index = mod( placed_resource_count, resource_count );
  if resource_index == 0 then
    resource_index = resource_count;
  end;
  local id_resource = ID_TABLE_RESOURCES[ resource_index ];
  ExPlaceObject( id_resource, position.x, position.y );
end;

-- Places a mob at the given position.
function PlaceMob( position, is_boss )
  -- sets the mob's level
  local hero_level = ExGetHeroLevel( g_MainHeroId );
  local reference_level = min( rotation_count, hero_level + 1 );
  if not is_boss then
    mob_level = random( reference_level - 1, reference_level );
  else
    mob_level = reference_level + 1;
  end;
  if mob_level < 1 then
    mob_level = 1;
  end;
  if mob_level > getn( MOB_TABLE ) then
    mob_level = getn( MOB_TABLE );
  end;
  if is_boss then
    boss_level = mob_level;
  end;
  -- places the mob at the specified location and sets its rotation mirror
  local new_mob_table = MOB_TABLE[ mob_level ];
  local new_mob_count = getn( new_mob_table );
  local new_mob_index = random( 1, new_mob_count );
  local new_mob = new_mob_table[ new_mob_index ];
  local new_mob_id = ExCreateHeroForPlayer( 0, new_mob, position.x, position.y );
  ExSetRotateMirror( new_mob_id, position.rot );
  local mobs_count = getn( mobs );
  mobs[ mobs_count + 1 ] = new_mob_id;
end;

-- Calculates the amount of loot a mob drops based on the mob's level.
function GetLootCount( mob_level )
  local bonus_loot_count = 0;
  -- each loop has a chance to increase loot count
  for i = 1, 5 do
    local scope = ( 20 * mob_level ) - ( ( i - 1 ) * 80 );
    if scope >= 100 then
      scope = 95;
    end;
    if random( 1, 100 ) < scope then
      bonus_loot_count = bonus_loot_count + 1;
    end;
  end;
  local loot_count = mob_level + 1 + bonus_loot_count;
  return loot_count;
end;

-- Calculates loot level based on mob level.
function GetLootLevel( mob_level )
  local loot_level = 1;
  -- each loop has a chance to increase loot level
  for i = 1, 3 do
    local scope = ( 20 * ( mob_level - 1 ) ) - ( ( i - 1 ) * 80 );
    if random( 1, 100 ) < scope then
      loot_level = loot_level + 1;
    end;
  end;
  return loot_level;
end;

-- Returns a random element from the given table.
function GetRandomElement( table )
  local element_count = getn( table );
  local element_index = random( 1, element_count );
  local element = table[ element_index ];
  return element;
end;

-- Returns a table of random numbers between the given values (both inclusive).
function GetRandomIndexes( first_index, last_index )
  local indexes = {};
  local offset = first_index - 1;
  for i = 1, last_index - offset do
    indexes[i] = i + offset;
  end;
  local indexes = Shuffle( indexes );
  return indexes;
end;

-- Shuffles and returns the given table.
function Shuffle( table )
  for i = 1, getn( table ) do
    for j = 1, 5 do
      rand_index = random( 1, getn( table ) );
      temp = table[ i ];
      table[i] = table[ rand_index ];
      table[ rand_index ] = temp;
    end;
  end;
  return table;
end;